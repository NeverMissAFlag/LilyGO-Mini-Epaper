// According to the board, cancel the corresponding macro definition
// https://www.lilygo.cc/products/mini-e-paper-core , esp32picod4
// #define LILYGO_MINI_EPAPER_ESP32
// esp32s3-fn4r2
#define LILYGO_MINI_EPAPER_ESP32S3

#if !defined(LILYGO_MINI_EPAPER_ESP32S3)  && !defined(LILYGO_MINI_EPAPER_ESP32)
// 请在草图上方选择对应的目标板子名称,将它取消注释.
#error "Please select the corresponding target board name above the sketch and uncomment it."
#endif


#include <boards.h>
#include <GxEPD.h>
#include <SD.h>
#include <FS.h>
#include <AceButton.h>    //https://github.com/bxparks/AceButton
using namespace         ace_button;

#include <GxGDGDEW0102T4/GxGDGDEW0102T4.h> //1.02" b/w

#include GxEPD_BitmapExamples

// FreeFonts from Adafruit_GFX
#include <Fonts/FreeMonoBold9pt7b.h>
#include <Fonts/FreeMonoBold12pt7b.h>
#include <Fonts/FreeMonoBold18pt7b.h>
#include <Fonts/FreeMonoBold24pt7b.h>
#include <Fonts/FreeMonoBoldOblique9pt7b.h>
#include <Fonts/FreeMonoBoldOblique12pt7b.h>
#include <Fonts/FreeMonoBoldOblique18pt7b.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeSansBold9pt7b.h>
#include <Fonts/FreeSansBold12pt7b.h>
#include <Fonts/FreeSansBoldOblique9pt7b.h>
#include <Fonts/FreeSansBoldOblique12pt7b.h>
#include <Fonts/FreeSansOblique9pt7b.h>
#include <Fonts/FreeSerif9pt7b.h>
#include <Fonts/FreeSerifBold9pt7b.h>
#include <Fonts/FreeSerifBold12pt7b.h>
#include <Fonts/FreeSerifBoldItalic9pt7b.h>
#include <Fonts/FreeSerifBoldItalic12pt7b.h>
#include <Fonts/FreeMono9pt7b.h>
#include <Fonts/FreeMono12pt7b.h>
#include <Fonts/FreeMonoOblique9pt7b.h>
#include <Fonts/FreeMonoOblique12pt7b.h>
#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>
#include <WiFi.h>

#include "font_prazo_7.h"
#include "font_prazo_9.h"
#include "font_prazo_12.h"
#include "font_prazo_16.h"
#include "font_prazo_18.h"
#include "font_prazo_22.h"
#include "font_prazo_24.h"

GxIO_Class io(SPI,  EPD_CS, EPD_DC,  EPD_RSET);
GxEPD_Class display(io, EPD_RSET, EPD_BUSY);


AceButton btn1(BUTTON_1, HIGH);
AceButton btn2(BUTTON_2, HIGH);
AceButton btn3((uint8_t) BUTTON_3, HIGH);

#if defined(_HAS_SDCARD_) && !defined(_USE_SHARED_SPI_BUS_)
SPIClass SDSPI(HSPI);
#endif

bool rlst = false;
typedef struct {
		uint8_t channel;
		float frequency;
		uint8_t mode;
		uint8_t power;
		uint8_t squelch;
		uint8_t volume;
		uint8_t battery;
		uint8_t channelDigit;
} hybridStatusType;

// modes
#define STARTUP 			0
#define NORMAL_MODE		1
#define CH_SET				2
#define MENU					3

hybridStatusType hybridStatus;

/* 128x28 works
const unsigned char raceceiver_logo[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 
	0x00, 0x0b, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xa0, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x81, 0xfc, 0x00, 
	0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x3e, 0x00, 
	0x03, 0x80, 0x03, 0xfe, 0x1f, 0x07, 0xf1, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xc0, 
	0x0e, 0x00, 0x07, 0xfe, 0x1f, 0x0f, 0xf3, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 
	0x38, 0x00, 0x07, 0x9e, 0x3f, 0x1e, 0x7b, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0x60, 0x00, 0x3f, 0x9c, 0x7f, 0x7c, 0x67, 0x80, 0x78, 0x18, 0x06, 0x67, 0xe6, 0x03, 0x81, 0xfc, 
	0xc0, 0x00, 0x0f, 0xfc, 0xff, 0x38, 0x07, 0xf8, 0xe3, 0xf9, 0xfc, 0x67, 0xc6, 0x7f, 0x18, 0xfe, 
	0xc0, 0x00, 0x0f, 0xf0, 0xef, 0x78, 0x07, 0xf9, 0x8f, 0xf9, 0xfc, 0xe7, 0x8c, 0x7f, 0x3c, 0xff, 
	0x80, 0x00, 0x3f, 0xf1, 0xcf, 0xf0, 0x8f, 0xf1, 0x9f, 0xf0, 0x1c, 0xe7, 0x1c, 0x07, 0x39, 0xff, 
	0xc0, 0x00, 0xfe, 0xf7, 0xfe, 0x71, 0xef, 0x03, 0x1f, 0xf3, 0xf9, 0xe7, 0x3c, 0xfe, 0x03, 0xff, 
	0x40, 0x00, 0x1c, 0xf7, 0xfe, 0xff, 0xdf, 0xfb, 0x9f, 0xe3, 0xf9, 0xe6, 0x79, 0xfe, 0x73, 0xff, 
	0x70, 0x00, 0x7c, 0xff, 0x0e, 0x7f, 0x9f, 0xfb, 0x8f, 0xe7, 0xf1, 0xe0, 0xf9, 0xfc, 0xf1, 0xff, 
	0x3c, 0x01, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf9, 0xc0, 0x60, 0x33, 0xe1, 0xf0, 0x0c, 0xf1, 0xff, 
	0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
};
*/

// 120 x 28 black background
/*
const unsigned char raceceiver_logo[] = {
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf1, 0xfc, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x07, 0x80, 0x0f, 0xf8, 0x78, 0x3f, 0x9f, 
	0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xc0, 0x0e, 0x00, 0x0f, 0xf8, 0x78, 0x7f, 0x9f, 0xf0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x38, 0x00, 0x3f, 0xf8, 0xf8, 0xff, 0xbf, 0xf3, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x00, 0x3e, 0x79, 0xf9, 0xe3, 0xbc, 0x07, 0xff, 0x9f, 
	0xd9, 0xfb, 0x9f, 0xff, 0xfc, 0xc0, 0x00, 0x1f, 0xf3, 0xf9, 0xe0, 0x7f, 0x8e, 0x7f, 0x3f, 0x99, 
	0xf3, 0x3f, 0x9c, 0x7e, 0x80, 0x00, 0x3f, 0xe7, 0xbb, 0xc0, 0x7f, 0x9c, 0xff, 0x3f, 0x99, 0xe7, 
	0x3f, 0x9e, 0x7f, 0x80, 0x00, 0x7f, 0xcf, 0xbf, 0xc6, 0x7f, 0x99, 0xff, 0x3f, 0x39, 0xef, 0x3f, 
	0x9d, 0xff, 0xc0, 0x00, 0xfb, 0xdf, 0xfb, 0xcf, 0xf0, 0x39, 0xfe, 0x7f, 0x3d, 0xde, 0x7f, 0x31, 
	0xff, 0xc0, 0x01, 0xfb, 0xff, 0xfb, 0xfe, 0xff, 0xb9, 0xfe, 0x7f, 0x7d, 0x9e, 0x7f, 0x39, 0xff, 
	0x70, 0x00, 0x79, 0xff, 0xfb, 0xfd, 0xff, 0x98, 0xfc, 0x7e, 0x7c, 0x3e, 0x7e, 0x79, 0xff, 0x38, 
	0x01, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x7c, 0x7e, 0x7c, 0x7c, 0x7e, 0x79, 0xff, 0x1f, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00
};
*/

/* WORKS BEST SO FAR
const unsigned char raceceiver_logo[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 
	0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x2f, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x03, 0xf8, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x3e, 0x00, 0x03, 0xc0, 0x07, 0xe0, 0x00, 0x0f, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x80, 0x0e, 0x00, 0x07, 0xf8, 0x78, 0x3f, 0x9f, 0xf0, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xe0, 0x18, 0x00, 0x0f, 0xf8, 0xf8, 0x7f, 0x9f, 0xf0, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x30, 0x00, 0x0e, 0x38, 0xf8, 0xf3, 0x9c, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x00, 0x1e, 0x71, 0xf9, 0xe0, 0x38, 0x07, 0x01, 0x00, 0x89, 
	0xf1, 0x80, 0x80, 0xfc, 0xc0, 0x00, 0x1f, 0xf3, 0xb9, 0xc0, 0x3f, 0x8c, 0x7f, 0x3f, 0x99, 0xf3, 
	0x1f, 0x9c, 0x7e, 0x80, 0x00, 0x1f, 0xc3, 0xb9, 0xc0, 0x7f, 0x98, 0xff, 0x3f, 0x19, 0xe7, 0x3f, 
	0x9e, 0x7e, 0x80, 0x00, 0x3f, 0xc7, 0x3f, 0xc0, 0x78, 0x19, 0xfe, 0x03, 0x39, 0xc6, 0x03, 0x18, 
	0xff, 0x80, 0x00, 0xf9, 0xcf, 0xfb, 0x86, 0xf0, 0x11, 0xfe, 0x03, 0x38, 0x8e, 0x03, 0x03, 0xfe, 
	0x40, 0x00, 0x39, 0xcf, 0xfb, 0xfe, 0xf0, 0x31, 0xfe, 0x7e, 0x38, 0x9e, 0x7f, 0x31, 0xff, 0x60, 
	0x00, 0x71, 0xdc, 0x7b, 0xfc, 0xff, 0x98, 0xfc, 0x7e, 0x7c, 0x3c, 0x7e, 0x39, 0xfc, 0x38, 0x00, 
	0x71, 0xfc, 0x79, 0xf1, 0xff, 0x9c, 0x04, 0x06, 0x7c, 0x7c, 0x02, 0x79, 0xfb, 0x1e, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x07, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x03, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x01, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0x00, 0x67, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x80, 0x00, 0x0c, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0xc3, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0x81, 0x80, 0x00, 0x00, 0x00, 0x06, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xfc, 
	0x0c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7c, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8f, 0xfc, 0x00, 0x1f, 0xf8, 0x40, 0x00, 0x00, 
	0x00, 0x00
};
*/

const unsigned char raceceiver_logo[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xe0, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x87, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xf8, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xe3, 0xf0, 0x0f, 0xe0, 0xf0, 0x7e, 0x3f, 0xc3, 0xc3, 0xc0, 
	0x6d, 0xf2, 0x03, 0x03, 0xc7, 0xcf, 0xc0, 0x1f, 0xf1, 0xf0, 0xff, 0x3f, 0x8f, 0x81, 0xc0, 0x4c, 
	0xf2, 0x03, 0x01, 0xf3, 0x9f, 0x80, 0x1c, 0xe1, 0xf1, 0xc7, 0x70, 0x1f, 0x3c, 0xcf, 0xcc, 0xe6, 
	0x7e, 0x79, 0xf9, 0xbf, 0x00, 0x1d, 0xe3, 0x71, 0x80, 0x7f, 0x1f, 0x3f, 0x9f, 0xcc, 0xe4, 0xfe, 
	0x79, 0xf9, 0x3f, 0x00, 0x3f, 0xc7, 0x73, 0x80, 0x7f, 0x1f, 0x7f, 0x80, 0xcc, 0xcc, 0x06, 0x03, 
	0xf8, 0x3f, 0x00, 0x3f, 0x8e, 0x73, 0x80, 0xe0, 0x1e, 0x7f, 0x9f, 0xcc, 0xdc, 0xfe, 0x07, 0xf8, 
	0xbf, 0x00, 0x33, 0x8f, 0xf3, 0x8c, 0xe0, 0x1e, 0x7d, 0x9f, 0x9e, 0x9c, 0xfe, 0xe7, 0xf9, 0x9f, 
	0x80, 0x73, 0x9f, 0xf3, 0xfc, 0xfe, 0x0f, 0x39, 0xbf, 0x9e, 0x3d, 0xfc, 0xe7, 0xf1, 0xcf, 0xc0, 
	0x73, 0xf8, 0x71, 0xf1, 0xfe, 0x0f, 0x03, 0x00, 0x9e, 0x38, 0x04, 0xf3, 0xf3, 0xe3, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xcf, 0x81, 0xbf, 0x7c, 0x0d, 0xfb, 0xc7, 0xf8, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfe, 0x3f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0x87, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xf0, 0x7e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff
};

void printChannel(const GFXfont *f);
void showFont(const char name[], const GFXfont *f);
void drawCornerTest(void);
void GxepdPage0();
void GxepdPage1();
void GxepdPage2();
void EnterSleep();
void printStartup();
void SelButton();
void UpButton();
void DownButton();
void MainScreen();

bool setupSDCard(void)
{
#if defined(_HAS_SDCARD_) && !defined(_USE_SHARED_SPI_BUS_)
    SDSPI.begin(SDCARD_SCLK, SDCARD_MISO, SDCARD_MOSI);
    return SD.begin(SDCARD_CS, SDSPI);
#elif defined(_HAS_SDCARD_)
    return SD.begin(SDCARD_CS);
#endif
    return false;
}


void testWiFi()
{
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    // WiFi.scanNetworks will return the number of networks found
    int n = WiFi.scanNetworks();

    Serial.println("scan done");
    if (n == 0) {
        Serial.println("no networks found");
    } else {
        Serial.print(n);
        Serial.println(" networks found");
        for (int i = 0; i < n; ++i) {
            // Print SSID and RSSI for each network found
            Serial.print(i + 1);
            Serial.print(": ");
            Serial.print(WiFi.SSID(i));
            Serial.print(" (");
            Serial.print(WiFi.RSSI(i));
            Serial.print(")");
            Serial.println((WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? " " : "*");
            delay(10);
        }
    }
    Serial.println("");
}


static void aceButtonHandleEventCb(AceButton *b, uint8_t event, uint8_t state)
{
    Serial.printf("Pin:%d event:%u state:%u\n", b->getPin(), event, state);


#if defined(LILYGO_MINI_EPAPER_ESP32 ) || defined(LILYGO_MINI_EPAPER_ESP32S3)
    if (event != AceButton::kEventReleased && event != AceButton::kEventLongPressed) {
        return;
    }
#else
    if (event != AceButton::kEventClicked && event != AceButton::kEventLongPressed) {
        return;
    }
#endif

    switch (b->getPin()) {
    case BUTTON_1:
//        GxepdPage0();
				UpButton();
        break;
    case BUTTON_2:
//        GxepdPage1();
				DownButton();
        break;
    case BUTTON_3:
//        GxepdPage2();
				SelButton();
        break;
    default:
        break;
    }
}

void setup()
{

		hybridStatus.channel = 150;
		hybridStatus.frequency = 450.0 + (0.0125 * (hybridStatus.channel));
		hybridStatus.mode = STARTUP;


    Serial.begin(115200);
    Serial.println();
    Serial.println("setup");

    /*Turn on power control*/
    pinMode(EPD_POWER_ENABLE, OUTPUT);
    digitalWrite(EPD_POWER_ENABLE, HIGH);

    SPI.begin(EPD_SCLK, EPD_MISO, EPD_MOSI);

    display.init();
    display.setTextColor(GxEPD_BLACK);

    pinMode(BUTTON_1, INPUT);
    btn1.init(BUTTON_1);
    ButtonConfig *buttonConfig = btn1.getButtonConfig();
    buttonConfig->setEventHandler(aceButtonHandleEventCb);
    buttonConfig->setFeature(ButtonConfig::kFeatureRepeatPress);
    buttonConfig->setFeature(ButtonConfig::kFeatureLongPress);

    pinMode(BUTTON_2, INPUT);
    btn2.init(BUTTON_2);
    buttonConfig = btn2.getButtonConfig();
    buttonConfig->setEventHandler(aceButtonHandleEventCb);
    buttonConfig->setFeature(ButtonConfig::kFeatureRepeatPress);

//    testWiFi();

//    rlst = setupSDCard();

		printStartup();
		delay(3000);
		MainScreen();
		hybridStatus.mode = NORMAL_MODE;

}

void loop()
{

    btn1.check();
    btn2.check();
    btn3.check();
}

void GxepdPage0()
{
    display.setRotation(0);
    display.fillScreen(GxEPD_WHITE);

#if defined(_HAS_COLOR_)
    display.drawExampleBitmap(BitmapExample1, 0, 0, GxEPD_WIDTH, GxEPD_HEIGHT, GxEPD_RED);
#else
    display.drawExampleBitmap(BitmapExample1, 0, 0, GxEPD_WIDTH, GxEPD_HEIGHT, GxEPD_BLACK);
#endif

#if defined(_HAS_SDCARD_)
    display.setRotation(1);
    display.setTextColor(GxEPD_BLACK);
    display.setFont();
#if defined(LILYGO_MINI_EPAPER_ESP32 ) || defined(LILYGO_MINI_EPAPER_ESP32S3)
    display.setCursor(0, display.height() - 15);
#else
    display.setCursor(20, display.height() - 15);
#endif
    String sizeString = "SD:" + String(SD.cardSize() / 1024.0 / 1024.0 / 1024.0) + "G";
    display.println(rlst ? sizeString : "SD:N/A");

    int16_t x1, x2;
    uint16_t w, h;
    String str = GxEPD_BitmapExamplesQ;
    str = str.substring(2, str.lastIndexOf("/"));
    display.getTextBounds(str, 0, 0, &x1, &x2, &w, &h);
    display.setCursor(display.width() - w, display.height() - 15);
    display.println(str);
#endif

    display.update();
}

void showFont(const char name[], const GFXfont *f)
{
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);
    display.setFont(f);
    display.setCursor(0, 0);
    display.println();
    display.println(name);
    display.println(" !\"#$%&'()*+,-./");
    display.println("0123456789:;<=>?");
    display.println("@ABCDEFGHIJKLMNO");
    display.println("PQRSTUVWXYZ[\\]^_");
    display.println("`abcdefghijklmno");
    display.println("pqrstuvwxyz{|}~ ");
    display.update();
    delay(5000);
}

void printChannel(const GFXfont *f)
{
		display.setRotation(1);
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);
    display.setFont(f);
    display.setCursor(10, 10);
    display.println("CH 001");
    display.println("454.0125");
    display.update();
    delay(5000);
}

void printStartup()
{
		display.setRotation(1);
		display.fillScreen(GxEPD_WHITE);
		display.setTextColor(GxEPD_BLACK);
		display.drawBitmap(raceceiver_logo, 4, 13, 120, 30, GxEPD_WHITE, 1);
//		display.setFont(&FreeSansBold9pt7b);
//		display.setCursor(12, 35);
//		display.print("RACEceiver");
		display.setCursor(24, 61);
		display.setFont(&FreeSansBoldOblique12pt7b);
		display.print("Hybrid");
		display.update();
}

void EnterSleep()
{
    Serial.println("EnterSleep");
    delay(2000);
    esp_sleep_enable_ext1_wakeup(((uint64_t)(((uint64_t)1) << BUTTON_1)), ESP_EXT1_WAKEUP_ALL_LOW);
    esp_deep_sleep_start();
    /*Turn on power control*/
}

void drawCornerTest()
{
    display.drawCornerTest();
    delay(5000);
    uint8_t rotation = display.getRotation();
    for (uint16_t r = 0; r < 4; r++) {
        display.setRotation(r);
        display.fillScreen(GxEPD_WHITE);
        display.fillRect(0, 0, 8, 8, GxEPD_BLACK);
        display.fillRect(display.width() - 18, 0, 16, 16, GxEPD_BLACK);
        display.fillRect(display.width() - 25, display.height() - 25, 24, 24, GxEPD_BLACK);
        display.fillRect(0, display.height() - 33, 32, 32, GxEPD_BLACK);
        display.update();
        delay(5000);
    }
    display.setRotation(rotation); // restore
}

void GxepdPage1()
{
    Serial.println("GxepdPage1");
    display.setRotation(0);
    display.fillScreen(GxEPD_WHITE);
    delay(1000);
    /*
    display.fillTriangle(0, display.height() - 1,
                         display.width(), 0,
                         display.width() - 1, display.height() - 1
                         , GxEPD_BLACK);*/

    int16_t x1, y1;
    uint16_t w, h;
    display.drawExampleBitmap(gImage_1, 0, 0, GxEPD_WIDTH, GxEPD_HEIGHT, GxEPD_WHITE);
    String str = "Product By LilyGo";
    delay(1000);
    display.update();

    Serial.println("GxepdPage1 done");

    //EnterSleep();
}

void GxepdPage2()
{
	char str[20];

    Serial.println("GxepdPage2");
    display.setRotation(1);
    display.fillScreen(GxEPD_WHITE);

    uint16_t  offset_y1 = 0,
              offset_y2 = 0,
              offset_y3 = 0,
              offset_y4 = 0;
#if   defined(_GxGDEW0213M21_H_) || defined(_GxGDEW0213Z16_H_)
    const GFXfont *font1 = &prazo_Regular_29pt7b;
    const GFXfont *font2 = &prazo_Regular_212pt7b;
    offset_y1 = 20;
    offset_y2 = 40;
    offset_y3 = 60;
    offset_y4 = 25;

#elif defined(_GxGDGDEW0102T4_H_)
/*
    const GFXfont *font1 = &prazo_Regular_27pt7b;
    const GFXfont *font2 = &prazo_Regular_29pt7b;
    offset_y1 = 15;
    offset_y2 = 30;
    offset_y3 = 45;
    offset_y4 = 20;
*/
    const GFXfont *font1 = &FreeMonoBold12pt7b;
    offset_y1 = 25;
    offset_y2 = 50;

#elif defined(_GxDEPG0290B_H_) || defined(_GxGDEM0213B74_H_) || defined(_GxDEPG0290R_H_) || defined(_GxGDEW029Z10_H_) ||defined(_GxGDEH029A1_H_) || defined(_GxDEPG0213BN_H_) || defined(_GxGDEH0213B73_H_) || defined(_GxGDEH0213B72_H_) || defined(_GxGDE0213B1_H_) || defined(_GxDEPG0266BN_H_)
    const GFXfont *font1 = &prazo_Regular_212pt7b;
    const GFXfont *font2 = &prazo_Regular_218pt7b;
    offset_y1 = 25;
    offset_y2 = 50;
    offset_y3 = 75;
    offset_y4 = 30;
#elif defined(_GxGDEW027W3_H_) || defined(_GxGDEW027C44_H_) || defined(_GxDEPG0750BN_H_)
    const GFXfont *font1 = &prazo_Regular_216pt7b;
    const GFXfont *font2 = &prazo_Regular_224pt7b;
    offset_y1 = 42;
    offset_y2 = 75;
    offset_y3 = 110;
    offset_y4 = 45;
#elif defined(_GxDEPG0150BN_H_)
    const GFXfont *font1 = &prazo_Regular_216pt7b;
    const GFXfont *font2 = &prazo_Regular_224pt7b;
    offset_y1 = 42;
    offset_y2 = 80;
    offset_y3 = 120;
    offset_y4 = 50;

#endif
    display.setTextColor(GxEPD_BLACK);
    display.setFont(font1);
    display.setCursor(5, offset_y1);
		sprintf(str, "CH %04d", hybridStatus.channel);
		display.print(str);

    display.setCursor(5, offset_y2);
		sprintf(str, "%3.4f\n      MHz", hybridStatus.frequency);
		display.print(str);
    display.update();

}

void MainScreen()
{
	char str[20];

    display.setRotation(1);
    display.fillScreen(GxEPD_WHITE);

    uint16_t  offset_y1, offset_y2;

    const GFXfont *font1 = &FreeMonoBold12pt7b;
    offset_y1 = 25;
    offset_y2 = 50;

    display.setTextColor(GxEPD_BLACK);
    display.setFont(font1);
    display.setCursor(5, offset_y1);
		sprintf(str, "CH %04d", hybridStatus.channel);
		display.print(str);

    display.setCursor(5, offset_y2);
		sprintf(str, "%3.4f\n      MHz", hybridStatus.frequency);
		display.print(str);
    display.update();

}

void SelButton()
{
	char str[20];

	Serial.println("Center button pressed");
	display.setRotation(1);

	uint16_t  offset_y1, offset_y2;

	const GFXfont *font1 = &FreeMonoBold12pt7b;
	offset_y1 = 25;
	offset_y2 = 50;

  //display.setPartialWindow(0, 0, display.width(), 296); //this sets a window for the partial update, so the values can update without refreshing the entire screen.
  //display.firstPage();

	display.setTextColor(GxEPD_WHITE);
	display.setFont(font1);
	display.setCursor(5, offset_y1);
//	sprintf(str, "   0", hybridStatus.channel);
	display.print("   0");
  display.update();
}

void UpButton()
{
	char str[20];

    Serial.println("Up button pressed");
    display.setRotation(1);
    display.fillScreen(GxEPD_WHITE);

    uint16_t  offset_y1, offset_y2;

    const GFXfont *font1 = &FreeMonoBold12pt7b;
    offset_y1 = 25;
    offset_y2 = 50;

    display.setTextColor(GxEPD_BLACK);
    display.setFont(font1);
    display.setCursor(5, offset_y1);
		sprintf(str, "CH %04d", hybridStatus.channel);
		display.print(str);

    display.setCursor(5, offset_y2);
		sprintf(str, "%3.4f\n      MHz", hybridStatus.frequency);
		display.print(str);
    display.update();

}

void DownButton()
{
	char str[20];

    Serial.println("Down button pressed");
    display.setRotation(1);
    display.fillScreen(GxEPD_WHITE);

    uint16_t  offset_y1, offset_y2;

    const GFXfont *font1 = &FreeMonoBold12pt7b;
    offset_y1 = 25;
    offset_y2 = 50;

    display.setTextColor(GxEPD_BLACK);
    display.setFont(font1);
    display.setCursor(5, offset_y1);
		sprintf(str, "CH %04d", hybridStatus.channel);
		display.print(str);

    display.setCursor(5, offset_y2);
		sprintf(str, "%3.4f\n      MHz", hybridStatus.frequency);
		display.print(str);
    display.update();

}